{"version":3,"sources":["../../app-es6/services/HttpService.js"],"names":["HttpService","res","ok","Error","statusText","url","fetch","then","_handleErros","json","Promise","resolve","reject","xhr","XMLHttpRequest","open","onreadystatechange","readyState","status","JSON","parse","responseText","send","dado","headers","method","body","stringify","setRequestHeader"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCAAaA,W;;;;;;;iDAEIC,G,EAAI;AACb,4BAAG,CAACA,IAAIC,EAAR,EAAY,MAAM,IAAIC,KAAJ,CAAUF,IAAIG,UAAd,CAAN;AACZ,+BAAOH,GAAP;AACH;;;wCAEGI,G,EAAI;AAAA;;AACJ,+BAAOC,MAAMD,GAAN,EACGE,IADH,CACQ;AAAA,mCAAO,MAAKC,YAAL,CAAkBP,GAAlB,CAAP;AAAA,yBADR,EAEGM,IAFH,CAEQ;AAAA,mCAAON,IAAIQ,IAAJ,EAAP;AAAA,yBAFR,CAAP;AAGH;;;2CAEMJ,G,EAAK;AACR,+BAAO,IAAIK,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,MAAM,IAAIC,cAAJ,EAAV;;AAEAD,gCAAIE,IAAJ,CAAS,KAAT,EAAgBV,GAAhB;;AAEAQ,gCAAIG,kBAAJ,GAAyB,YAAM;AAC3B;;;;;;;;;;AAWA,oCAAIH,IAAII,UAAJ,IAAkB,CAAtB,EAAyB;;AAErB,wCAAIJ,IAAIK,MAAJ,IAAc,GAAlB,EAAuB;;AAEnBP,gDAAQQ,KAAKC,KAAL,CAAWP,IAAIQ,YAAf,CAAR;AAEH,qCAJD,MAIO;;AAEHT,+CAAOC,IAAIQ,YAAX;AAEH;AACJ;AAEJ,6BAzBD;;AA2BAR,gCAAIS,IAAJ;AACH,yBAlCM,CAAP;AAmCH;;;yCAEIjB,G,EAAIkB,I,EAAK;AAAA;;AAEV,+BAAOjB,MAAMD,GAAN,EAAU;AACbmB,qCAAS,EAAC,gBAAiB,kBAAlB,EADI;AAEbC,oCAAQ,MAFK;AAGbC,kCAAMP,KAAKQ,SAAL,CAAeJ,IAAf;AAHO,yBAAV,EAKNhB,IALM,CAKD;AAAA,mCAAO,OAAKC,YAAL,CAAkBP,GAAlB,CAAP;AAAA,yBALC,CAAP;AAOH;;;4CAEOI,G,EAAKkB,I,EAAM;;AAEf,+BAAO,IAAIb,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,MAAM,IAAIC,cAAJ,EAAV;AACAD,gCAAIE,IAAJ,CAAS,MAAT,EAAiBV,GAAjB,EAAsB,IAAtB;AACAQ,gCAAIe,gBAAJ,CAAqB,cAArB,EAAqC,kBAArC;AACAf,gCAAIG,kBAAJ,GAAyB,YAAM;;AAE3B,oCAAIH,IAAII,UAAJ,IAAkB,CAAtB,EAAyB;;AAErB,wCAAIJ,IAAIK,MAAJ,IAAc,GAAlB,EAAuB;;AAEnBP,gDAAQQ,KAAKC,KAAL,CAAWP,IAAIQ,YAAf,CAAR;AACH,qCAHD,MAGO;;AAEHT,+CAAOC,IAAIQ,YAAX;AACH;AACJ;AACJ,6BAZD;AAaAR,gCAAIS,IAAJ,CAASH,KAAKQ,SAAL,CAAeJ,IAAf,CAAT,EAlBoC,CAkBJ;AACnC,yBAnBM,CAAP;AAqBH","file":"HttpService.js","sourcesContent":["export class HttpService {\r\n\r\n    _handleErros(res){\r\n        if(!res.ok) throw new Error(res.statusText);\r\n        return res;\r\n    }\r\n\r\n    get(url){\r\n        return fetch(url)\r\n                 .then(res => this._handleErros(res))\r\n                 .then(res => res.json());\r\n    }\r\n\r\n    getXhr(url) {\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let xhr = new XMLHttpRequest();\r\n\r\n            xhr.open('GET', url);\r\n\r\n            xhr.onreadystatechange = () => {\r\n                /*\r\n                    Status requisicao ajax\r\n                    \r\n                    0: requisicao ainda nao iniciada\r\n                    1: conexao com o servidor estabelecida\r\n                    2: requisicao recebida\r\n                    3: processando requisicao\r\n                    4: requisicao concluida e resposta pronta \r\n    \r\n                */\r\n\r\n                if (xhr.readyState == 4) {\r\n\r\n                    if (xhr.status == 200) {\r\n\r\n                        resolve(JSON.parse(xhr.responseText));\r\n\r\n                    } else {\r\n\r\n                        reject(xhr.responseText);\r\n\r\n                    }\r\n                }\r\n\r\n            };\r\n\r\n            xhr.send();\r\n        });\r\n    }\r\n\r\n    post(url,dado){\r\n\r\n        return fetch(url,{\r\n            headers: {'Content-type' : 'application/json'},\r\n            method: 'post',\r\n            body: JSON.stringify(dado)\r\n        })\r\n        .then(res => this._handleErros(res))\r\n        \r\n    }\r\n\r\n    postXhr(url, dado) {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let xhr = new XMLHttpRequest();\r\n            xhr.open(\"POST\", url, true);\r\n            xhr.setRequestHeader(\"Content-type\", \"application/json\");\r\n            xhr.onreadystatechange = () => {\r\n\r\n                if (xhr.readyState == 4) {\r\n\r\n                    if (xhr.status == 200) {\r\n\r\n                        resolve(JSON.parse(xhr.responseText));\r\n                    } else {\r\n\r\n                        reject(xhr.responseText);\r\n                    }\r\n                }\r\n            };\r\n            xhr.send(JSON.stringify(dado)); // usando JSON.stringifly para converter objeto em uma string no formato JSON.\r\n        });\r\n\r\n    }\r\n}"]}